# -*- coding: utf-8 -*-
"""Airbnb Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19IsmNxbVWpFGVPi7FR_znb9ZI7ro7lTJ
"""



import streamlit as st
from streamlit_option_menu import option_menu
import plotly.express as px
import pandas as pd
import os
from PIL import Image
import warnings


warnings.filterwarnings('ignore')

st.set_page_config(page_title="AirBnb-Analysis", page_icon=":bar_chart:", layout="wide")

st.title(":bar_chart:   AirBnb-Analysis")
st.markdown('<style>div.block-container{padding-top:1rem;}</style>', unsafe_allow_html=True)

SELECT = option_menu(
    menu_title=None,
    options=["Home", "Explore Data", "Contact"],
    icons=["house", "bar-chart", "at"],
    default_index=2,
    orientation="horizontal",
    styles={"container": {"padding": "0!important", "background-color": "white", "size": "cover", "width": "100"},
            "icon": {"color": "black", "font-size": "20px"},

            "nav-link": {"font-size": "20px", "text-align": "center", "margin": "-2px", "--hover-color": "#6F36AD"},
            "nav-link-selected": {"background-color": "#6F36AD"}})

if SELECT == "Home":

 st.header('Airbnb Analysis')
 st.subheader("Airbnb is an American San Francisco-based company operating an online marketplace for short- and long-term homestays and experiences. The company acts as a broker and charges a commission from each booking. The company was founded in 2008 by Brian Chesky, Nathan Blecharczyk, and Joe Gebbia. Airbnb is a shortened version of its original name, AirBedandBreakfast.com. The company is credited with revolutionizing the tourism industry, while also having been the subject of intense criticism by residents of tourism hotspot cities like Barcelona and Venice for enabling an unaffordable increase in home rents, and for a lack of regulation.")
 st.subheader('Skills take away From This Project:')
 st.subheader('Python Scripting, Data Preprocessing, Visualization, EDA, Streamlit, MongoDb, PowerBI or Tableau')
 st.subheader('Domain:')
 st.subheader('Travel Industry, Property management and Tourism')

if SELECT == "Explore Data":
 fl = st.file_uploader(":file_folder: Upload a file", type=(["csv", "txt", "xlsx", "xls"]))
 if fl is not None:
    filename = fl.name
    st.write(filename)
    df = pd.read_csv(filename, encoding="ISO-8859-1")
 else:
    st.write("Please Choose A File Above For Visualization")

 st.sidebar.header("Choose your filter: ")

# Create for neighbourhood_group
 neighbourhood_group = st.sidebar.multiselect("Pick your neighbourhood_group", df["neighbourhood_group"].unique())
 if not neighbourhood_group:
     df2 = df.copy()
 else:
     df2 = df[df["neighbourhood_group"].isin(neighbourhood_group)]

 # Create for neighbourhood
 neighbourhood = st.sidebar.multiselect("Pick the neighbourhood", df2["neighbourhood"].unique())
 if not neighbourhood:
     df3 = df2.copy()
 else:
     df3 = df2[df2["neighbourhood"].isin(neighbourhood)]

 # Filter the data based on neighbourhood_group, neighbourhood

 if not neighbourhood_group and not neighbourhood:
     filtered_df = df
 elif not neighbourhood:
     filtered_df = df[df["neighbourhood_group"].isin(neighbourhood_group)]
 elif not neighbourhood_group:
     filtered_df = df[df["neighbourhood"].isin(neighbourhood)]
 elif neighbourhood:
     filtered_df = df3[df["neighbourhood"].isin(neighbourhood)]
 elif neighbourhood_group:
     filtered_df = df3[df["neighbourhood_group"].isin(neighbourhood_group)]
 elif neighbourhood_group and neighbourhood:
     filtered_df = df3[df["neighbourhood_group"].isin(neighbourhood_group) & df3["neighbourhood"].isin(neighbourhood)]
 else:
     filtered_df = df3[df3["neighbourhood_group"].isin(neighbourhood_group) & df3["neighbourhood"].isin(neighbourhood)]

 room_type_df = filtered_df.groupby(by=["room_type"], as_index=False)["price"].sum()

 col1, col2 = st.columns(2)
 with col1:
    st.subheader("room_type_ViewData")
    fig = px.bar(room_type_df, x="room_type", y="price", text=['${:,.2f}'.format(x) for x in room_type_df["price"]],
                 template="seaborn")
    st.plotly_chart(fig, use_container_width=True, height=200)

 with col2:
    st.subheader("neighbourhood_group_ViewData")
    fig = px.pie(filtered_df, values="price", names="neighbourhood_group", hole=0.5)
    fig.update_traces(text=filtered_df["neighbourhood_group"], textposition="outside")
    st.plotly_chart(fig, use_container_width=True)

 cl1, cl2 = st.columns((2))
 with cl1:
    with st.expander("room_type wise price"):
        st.write(room_type_df.style.background_gradient(cmap="Blues"))
        csv = room_type_df.to_csv(index=False).encode('utf-8')
        st.download_button("Download Data", data=csv, file_name="room_type.csv", mime="text/csv",
                           help='Click here to download the data as a CSV file')

 with cl2:
    with st.expander("neighbourhood_group wise price"):
        neighbourhood_group = filtered_df.groupby(by="neighbourhood_group", as_index=False)["price"].sum()
        st.write(neighbourhood_group.style.background_gradient(cmap="Oranges"))
        csv = neighbourhood_group.to_csv(index=False).encode('utf-8')
        st.download_button("Download Data", data=csv, file_name="neighbourhood_group.csv", mime="text/csv",
                           help='Click here to download the data as a CSV file')

import pandas as pd
import streamlit as st
import plotly.express as px

# Load your dataset (Replace with the correct file path or data source)
df = pd.read_csv("C:/Users/rahul/OneDrive/Desktop/Airbnb NYC 2019.csv")

# Make sure the dataset is loaded
st.write(df.head())  # This will display the first few rows of the dataset to confirm it loaded correctly

# Now you can proceed with the rest of the code
# Create for neighbourhood_group
neighbourhood_group = st.sidebar.multiselect("Pick your neighbourhood_group", df["neighbourhood_group"].unique())
if not neighbourhood_group:
    filtered_df = df.copy()  # No filter applied, use the entire dataset
else:
    filtered_df = df[df["neighbourhood_group"].isin(neighbourhood_group)]

# Create for neighbourhood
neighbourhood = st.sidebar.multiselect("Pick the neighbourhood", filtered_df["neighbourhood"].unique())
if not neighbourhood:
    filtered_df = filtered_df.copy()  # No further filtering
else:
    filtered_df = filtered_df[filtered_df["neighbourhood"].isin(neighbourhood)]

# Filter the data based on neighbourhood_group, neighbourhood
if neighbourhood_group and neighbourhood:
    filtered_df = df[df["neighbourhood_group"].isin(neighbourhood_group) & df["neighbourhood"].isin(neighbourhood)]
elif neighbourhood_group:
    filtered_df = df[df["neighbourhood_group"].isin(neighbourhood_group)]
elif neighbourhood:
    filtered_df = df[df["neighbourhood"].isin(neighbourhood)]
else:
    filtered_df = df.copy()  # No filter applied, so use the original dataframe

# Grouping the data for plotting
room_type_df = filtered_df.groupby(by=["room_type"], as_index=False)["price"].sum()

# Layout for the plots
col1, col2 = st.columns(2)
with col1:
    st.subheader("room_type_ViewData")
    fig = px.bar(room_type_df, x="room_type", y="price", text=['${:,.2f}'.format(x) for x in room_type_df["price"]],
                 template="seaborn")
    st.plotly_chart(fig, use_container_width=True, height=200)

with col2:
    st.subheader("neighbourhood_group_ViewData")
    fig = px.pie(filtered_df, values="price", names="neighbourhood_group", hole=0.5)
    fig.update_traces(text=filtered_df["neighbourhood_group"], textposition="outside")
    st.plotly_chart(fig, use_container_width=True)

# Displaying data with expanders and download buttons
cl1, cl2 = st.columns((2))
with cl1:
    with st.expander("room_type wise price"):
        st.write(room_type_df.style.background_gradient(cmap="Blues"))
        csv = room_type_df.to_csv(index=False).encode('utf-8')
        st.download_button("Download Data", data=csv, file_name="room_type.csv", mime="text/csv")

with cl2:
    with st.expander("neighbourhood_group wise price"):
        neighbourhood_group_df = filtered_df.groupby(by="neighbourhood_group", as_index=False)["price"].sum()
        st.write(neighbourhood_group_df.style.background_gradient(cmap="Oranges"))
        csv = neighbourhood_group_df.to_csv(index=False).encode('utf-8')
        st.download_button("Download Data", data=csv, file_name="neighbourhood_group.csv", mime="text/csv")

import streamlit as st
import plotly.express as px

# Scatter plot for 'neighbourhood_group', 'neighbourhood', and 'room_type'
data1 = px.scatter(filtered_df, x="neighbourhood_group", y="neighbourhood", color="room_type")

# Updating the layout of the plot
data1['layout'].update(
    title="Room_type in the Neighbourhood and Neighbourhood_Group wise data using Scatter Plot.",
    titlefont=dict(size=20),
    xaxis=dict(title="Neighbourhood_Group", titlefont=dict(size=20)),
    yaxis=dict(title="Neighbourhood", titlefont=dict(size=20))
)

# Display the plot in Streamlit
st.plotly_chart(data1, use_container_width=True)
st.write(df.style.background_gradient(cmap="Blues"))

# Expandable section for detailed room availability and price view data
with st.expander("Detailed Room Availability and Price View Data in the Neighbourhood"):
    st.write(filtered_df.iloc[:500, 1:20:2].style.background_gradient(cmap="Oranges"))

csv = df.to_csv(index=False).encode('utf-8')
st.download_button('Download Data', data=csv, file_name="Data.csv", mime="text/csv")

import plotly.figure_factory as ff

st.subheader(":point_right: Neighbourhood_group wise Room_type and Minimum stay nights")
with st.expander("Summary_Table"):
    df_sample = df[0:5][["neighbourhood_group", "neighbourhood", "reviews_per_month", "room_type", "price", "minimum_nights", "host_name"]]
    fig = ff.create_table(df_sample, colorscale="Cividis")
    st.plotly_chart(fig, use_container_width=True)

import streamlit as st
import pandas as pd



# Renaming columns to match the expected 'lat' and 'lon' for Streamlit map display
df = df.rename(columns={"Latitude": "lat", "Longitude": "lon"})

# Title for the map
st.subheader("Airbnb Analysis in Map view")

# Display the map
st.map(df)

# Layout with two columns
col1, col2 = st.columns(2)

with col1:
    st.write("This is the first column.")

with col2:
    st.write("This is the second column.")

with col1:
        image1 = Image.open("C:/Users/rahul/OneDrive/Desktop/AIRBNB.jpg")
        st.image(image1, width=300)

with col2:
    col2.subheader("NAME : Ragul Manickam")
    col2.subheader("EMAIL: Ragulmanickam123@gmail.com")
    col2.subheader("BATCH : MTD08")